# Load the stream module for TCP/UDP load balancing
load_module modules/ngx_stream_module.so;

worker_processes auto;
worker_rlimit_nofile 100000;

events {
    worker_connections 16384;
}

# Stream block for TCP/UDP load balancing
stream {
    proxy_timeout 60s;
    proxy_connect_timeout 10s;
    log_format basic '$remote_addr [$time_local] $protocol $status $bytes_sent $bytes_received $session_time';


    upstream kube_apiservers {
        least_conn;
        server master-01:6443 max_fails=3 fail_timeout=10s;
        server master-02:6443 max_fails=3 fail_timeout=10s;
        server master-03:6443 max_fails=3 fail_timeout=10s;
    }
    # Upstream for PostgreSQL (TCP)
    upstream backend_5432 {
        least_conn;
        server 192.168.3.30:5432;  # Worker Node 1
        server 192.168.3.31:5432;  # Worker Node 2
        server 192.168.3.32:5432;  # Worker Node 3
    }

    # Server block for Kubernetes API servers (TCP)
    server {
        listen 6443;
        ssl_preread on;
        proxy_pass kube_apiservers;
        proxy_timeout 10s;
        proxy_connect_timeout 5s;
        access_log /var/log/nginx/k8s_api.log basic;
    }
    # Server block for PostgreSQL (TCP)
    server {
        listen 5432;
        proxy_pass backend_5432;
    }
}

# HTTP block for HTTP/HTTPS load balancing
http {

   log_format combined '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log combined;
    error_log /var/log/nginx/error.log warn;

    proxy_send_timeout 60s;
    proxy_read_timeout 60s;
    keepalive_timeout 75s;
    
    # Upstream for HTTP traffic (port 80)
    upstream backend_80 {
        least_conn;
        server 192.168.3.30:80 max_fails=3 fail_timeout=10s;  # Worker Node 1
        server 192.168.3.31:80 max_fails=3 fail_timeout=10s;  # Worker Node 2
        server 192.168.3.32:80 max_fails=3 fail_timeout=10s;  # Worker Node 3
    }

    # Upstream for custom port 8123
    upstream backend_8123 {
        server 192.168.3.30:8123;  # Worker Node 1
        server 192.168.3.31:8123;  # Worker Node 2
        server 192.168.3.32:8123;  # Worker Node 3
    }

    # Upstream for custom port 9000
    upstream backend_9000 {
        server 192.168.3.30:9000;  # Worker Node 1
        server 192.168.3.31:9000;  # Worker Node 2
        server 192.168.3.32:9000;  # Worker Node 3
    }

    # Upstream for custom port 9001
    upstream backend_9001 {
        server 192.168.3.30:9001;  # Worker Node 1
        server 192.168.3.31:9001;  # Worker Node 2
        server 192.168.3.32:9001;  # Worker Node 3
    }

    # Server block for HTTP traffic (port 80)
    server {
        listen 80;

        location / {
            proxy_pass http://backend_80;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # Server block for custom port 8123
    server {
        listen 8123;

        location / {
            proxy_pass http://backend_8123;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # Server block for custom port 9000
    server {
        listen 9000;

        location / {
            proxy_pass http://backend_9000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # Server block for custom port 9001
    server {
        listen 9001;

        location / {
            proxy_pass http://backend_9001;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}    